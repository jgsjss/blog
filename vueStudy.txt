vue 셋팅방법

1. 프로젝트 생성할 폴더 생성
2.해당폴더를 vsc 같은 에디터 프로그램으로 폴더 오픈하기
3.Node.js 다운로드 및 설치(가능하면 최신, 혹은 LTS버전)
4.VSC에서 터미널 오픈 후 npm install @vue/cli 입력, 설치
5.설치 완료되면 create vue 프로젝트명 입력, 설치
셀렉트 창이 나오면 vue3 선택
6.부트스트랩 설치/ 부트스트랩. vue 도 있으나 큰차이없다함
부트스트랩 사이트에 정확한 명령어있음. 현재는 npm install bootstrap
7.설치 후 main.js에 import 'bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css' 코드 입력
8.라우터 설치.  npm install vue-router@4 입력
9.main.js에 라우터설정 코드 입력해도 되지만, 코드가 길어지기에 보통은 라우터.js파일을 따로만들어서
그곳에 라우터 설정 코딩을 한다.
기본 코딩은 
import { createWebHistory, createRouter } from "vue-router";

const routes = [
  {
    path: "/경로",
    component: import해온 컴포넌트,
  }
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router; 
이다. 굳이 이해할거 없고, vue-router 만든사람이 정한 사용법코드이기에 복사붙여넣기 해라
main.js에도 라우터를 사용한다는 코드를 입력한다.
import router from './router'
createApp(App).use(router).mount('#app')
App.vue에 원하는 라우터 출력 부분에 <router-view></router-view>를 추가하면 끝.

클릭시 페이지링크 이동하기<router-link to="/list">이동하기</router-link>

url경로에 파라미터를 받아서 라우팅하기
const routes = [
  {
    path: '/detail/:id',
    component: Detail,
  },
];
라우터.js파일에 위에처럼 코드를 입력하고 이용할 컴퍼넌트 안에 코딩을 한다.
Detail.vue
<div>
        <h4>상세페이지</h4>
        <h5>{{Blogs[$route.params.id].title}}</h5>
        <p>{{Blogs[$route.params.id].content}}</p>
        <router-view></router-view>
    </div>

List.vue
//@click="$router.push('/detail/0')" 는 클릭시 ('')안에 있는 경로로 페이지를 이동시키는 기능
<div>  
      <h5 @click="$router.push('/detail/0')">{{Blogs[0].title}}</h5>
      <p>{{Blogs[0].content}}</p>
      </div>
      <div>
----------------------------------------------------------------------------------------------------------

데이터 바인딩 기본문법
<script>
export default {
  name : 'App',
  data(){
    return {
      price1 : 60
    }
  }
}

</script>
----------------------------------------------------------------------------------------------------------
포문
<div class="menu">
  <a v-for="(작명,i) in 메뉴들" :key="i"> {{ 작명 }}</a>
</div>

이벤트핸들러
자바스크립트는 onclick="" 이라는 이벤트 핸들러를 HTML태그에 달았지만

Vue에서는 @click="" 이라고 사용합니다.

그럼 안에다가 자바스크립트를 자유롭게 입력가능합니다. 

 

<div>
  <h4>{{products[0]}}</h4>
  <p>50만원</p>
  <button @click="신고수++">허위매물신고</button>
  <span>신고수 : {신고수}</span>
</div>

코드가 길 경우 함수를 만들어씁니다

 

긴 코드를 짧게 축약해주는게 바로 함수문법입니다.

그래서 @click 안에 들어갈 말이 너무 길다면 함수를 만들어서 집어넣으십시오.

함수 만드는 자리는 이미 정해져있습니다. 밑에서 methods : {} 라는 항목을 신설해주면 됩니다. 

 
data(){
  return {
    신고수 : 0,
  },
  methods : {
    increase(){
      this.신고수 += 1
    }
  }
}
----------------------------------------------------------------------------------------------------------

모달창만들기
<div class="black-bg" v-if="모달창열렸니 == true">
  <div class="white-bg">
    <h4>상세페이지</h4>
    <p>상세페이지내용임</p>
  </div>
</div>
body {
  margin : 0;
}
div {
  box-sizing: border-box;
}
.black-bg {
  width: 100%; height:100%;
  background: rgba(0,0,0,0.5);
  position: fixed; padding: 20px;
}
.white-bg {
  width: 100%; background: white;
  border-radius: 8px;
  padding: 20px;
} 

----------------------------------------------------------------------------------------------------------
컴포넌트 쓰는 법

 

원하는 곳에서 어쩌구.vue 파일을 1. import하고 2. 등록하고 3. 쓰면 됩니다. 

 

import Discount from './Discount.vue 경로'

export default {
  data() {

  },
  components : {
    Discount,
  }
}
1. 아까 만들어둔 vue 파일을 import하고

2. 등록하는건 위와 같이 <script>안에 작성해주면 됩니다.

components 라는 항목이 이미 있으면 그거 쓰시고 없으면 하나 만드십시오. 

 

3. 그럼 이제 <template> 안에서 자유롭게 가져다쓸 수 있습니다.

<Discount>
<Discount/>
이런 식으로 원하는 곳 아무데나 사용가능합니다.

----------------------------------------------------------------------------------------------------------

자식이 부모가 가진 데이터 쓰려면 props

 

부모 -> 자식 이렇게 props라는 문법으로 전송해주어야 사용가능합니다.

props 쓰려면 이것도 3-step이 있습니다. 

1. 보내고 2. 등록하고 3. 쓰면 됩니다. 3번은 생략해도 에러는 안남 

 

 

원룸들이라는 App.vue에 있는 데이터를 Modal.vue로 보내봅시다.

 

(App.vue)

<Modal :원룸들="원룸들" />
① 이렇게 데이터바인딩 문법쓰시면 데이터를 <Modal>로 보낼 수 있습니다.

 

<Modal :작명="하단의데이터이름" /> 이런 식으로 써주면 됩니다. 근데 귀찮아서 이름 두개 통일함

(그래서 콜론 : 이거 역할은 2개입니다. 데이터바인딩 혹은 props 전송임)

 

 

 

(Modal.vue)

<script>
  export default {
    name : 'Modal',
    props : {
      원룸들 : Array,
    }
  }
</script>
② 자식컴포넌트는 데이터를 받으면 props로 등록하십시오.

props : {} 열고 거기다가 아까 작명한 { 데이터이름 : 자료형 }

적어주면 됩니다. 

자료형엔 Array, Object, String, Number 이런 것들을 적으면 됩니다. 

 

③ props 등록한 것들은 HTML안에서 데이터바인딩으로 자유롭게 사용가능합니다.

 

그래서 원룸들, 누른거, 모달창열렸니 이런 데이터들을 App.vue에서 Modal.vue로 한번 보내보십시오.

잘 보냈으면 모달창이 동작할겁니다.

하지만 닫기버튼은 주석처리합시다. 아마 props 수정하지마세요~ 이런 에러가 뜰겁니다. 

props는 그냥 받아서 사용만 하는 read-only 데이터처럼 취급하셔야지 수정하시면 안됩니다. 에러남 

 

 

 

 

Q. 애초에 Modal.vue에다가 원룸들, 누른거 이런거 데이터 저장해두면 안되나?

 

props가 귀찮기 때문에

App.vue에다가 만들지말고 애초에 Modal.vue 파일에다가 data(){} 열고

여기에 데이터들 저장해놓고 쓰면 안되냐는 소리입니다. 

 

내가 이 데이터를 Modal.vue 안에서만 쓸 거라고 자신하면 거기다가 만드셔도 됩니다.

하지만 데이터를 만들 때 원칙이 있는데

"데이터를 사용하는 컴포넌트들 중 최상위 컴포넌트에다가 데이터를 만들어놔야함"

이걸 지켜서 만들어주시길 바랍니다.

왜냐면 데이터는 위로 전송하는게 복잡하고 추적이 어렵기 때문입니다.

귀찮으면 그냥 모조리 App.vue에 저장해놓으셈 그것도 나쁘지 않습니다. 

 
오늘의 교훈 :

컴포넌트로 많이 쪼개면 props 보내는거 귀찮으니까

만들기 전에 "만들면 이득이 있을까" 라는 생각을 해보고 만들도록 합시다. 

----------------------------------------------------------------------------------------------------------

<button @click="모달창열렸니 = false">닫기버튼</button>
Modal.vue에 이렇게 코드짜면 되겠습니까

모달창열렸니는 Modal.vue가 아니라 App.vue에 있는 데이터라 안됩니다. 

부모에 있는 데이터 수정하고 싶으면 커스텀이벤트로 메세지를 주면 됩니다.

 

 

<button @click="$emit('closeModal')">닫기버튼</button>
그래서 Modal.vue는 이렇게 메세지를 보냈고

 

<Modal @closeModal="모달창열렸니 = false">
App.vue는 수신하는 코드를 이렇게 작성했습니다.

 
----------------------------------------------------------------------------------------------------------
사용자가 <input>에 뭔가 입력하면 그걸 가지고 여러가지 UI 기능들을 만들어낼 수 있습니다.

쇼핑몰에서 흔히 쓰는 1. 상품 수량변경기능 2. 총금액계산기능을 만들어보며 배워봅시다.

그러기 위해선 <input>에 유저가 입력한 내용을 data(){} 안에 저장하는 법 부터 알아야합니다.

실은 다 배우긴 했는데 @input @onchange 이벤트 핸들러 쓰셔도 되고

혹은 더 짧아보이는 v-model 이런거 쓰시면 됩니다. 

 

 

 

 

 

사용자가 입력한 정보를 data로 저장하려면

 

그래서 Modal.vue에다가 <input> 하나만 만들어보십시오.

여기다가 상품 수량을 입력하면 수량에 맞는 최종가격을 모달창에서 보여주고 싶은겁니다.

코드 어떻게 짜야합니까. 

 

사용자가 입력한 정보에 따라서 이것저것 뭔가 실시간으로 바뀌고 싶으면

당연히 data로 저장해두시고 필요할 때 {{데이터바인딩}} 하셔야합니다. 

그래서 사용자가 <input>에 입력한 값을 data로 저장하고 싶으면 코드 이렇게 짜면 됩니다.

 

(Modal.vue임)

<template>
  (생략)
  <input @input="month = $event.target.value">
</template>
<script>
export default {
  data(){
    return {
      month : 0
    }
  }
}
</script>
 

 

1. @input 이거는 @click 이거랑 똑같은겁니다. 근데 사용자가 input에 뭔가 입력할 때 동작하는 이벤트핸들러입니다. 유사품 @change 이런 것도 있습니다.

 

2. $event는 Vue가 제공하는 특별한 변수인데 event object라는걸 뜻합니다. 

자바스크립트 이벤트리스너에서 addEventListener('click', function(e){}) 이런 문법을 쓰는데 여기서의 e랑 똑같은 의미입니다. 

그래서 $event.target.value라고 작성하면 <input>에 입력한 값을 가져올 수 있습니다. 

 

3. 그걸 밑에 month라는 data 항목에 저장하라고 써놨습니다.

그럼 이제 저기 <input>에 뭔가 입력할 때마다 month라는 곳에 사용자가 입력한 값이 저장됩니다.

끝 

사용자가 입력한 정보를 data로 저장하려면 2 

 

다른 방법도 있습니다. Vue는 뭔가 이런 자잘한 편의성 문법들이 많습니다. 

 

<input @input="month = $event.target.value"> 
아까 이렇게 개발해 놓은걸 

 

<input v-model="month"> 
이렇게 바꾸셔도 똑같이 동작합니다.

v-model은 "여기 입력된 값을 data로 바로 저장해주세요~" 라는 문법이기 때문입니다.

따옴표 안에 하단의 data 이름만 잘 적어주시면 됩니다.

 

 

 

(참고) <input> 태그말고도 <textarea> <select> 이런 것들에도 전부 적용가능합니다. 

<input type="checkbox"> 등 타입을 다양하게 바꾸셔도 적용가능합니다.

 

 

(참고2) 사용자가 <input>에 적은건 무조건 문자입니다. 123이라고 적어도 '123' 이런 문자로 저장됩니다.

그래서 v-model.number="month" 이런 directive라는걸 사용하시면 숫자가 들어오면 숫자로 저장해줍니다.

하지만 숫자로 변환만 해주는 거지 'ㄱㄴㄷ' 문자입력은 막을 수 없습니다.


사용자가 <input>에 입력한 데이터는 무조건 문자입니다. 

123 이렇게 입력해도 '123' 이렇게 됩니다. 

이걸 강제로 숫자로 바꾸고 싶으면 v-model.number="데이터이름" 이것만 장착해주면

데이터로 저장될 때 숫자자료로 바꿔서 저장됩니다. 

 

하지만 'abc' 문자를 인풋에 입력하는걸 막을 순 없습니다. 

이걸 막고 싶으면 watcher를 써봅시다.

watch : {} 라는 항목을 신설해서 거기다가 작성해주시면 되며

어떤 데이터를 계속 감시하는 역할을 하는 코드를 적을 수 있습니다. 

감시한다는게 어려운건 아니고

그냥 특정 데이터가 변경될 때마다 실행되는 코드를 여기 적을 수 있습니다.

그게 감시죠 뭐 
export default {
  data(){
    return {
      month : 1
    }
  },
  watch : {
    month(a){
      if (a > 12) {
         alert('13이상 입력하지마')
      }
    }
  }
}
 


 

데이터를 감시하고 싶으면 watch

 

그래서 Modal.vue에 이렇게 작성해보십시오 

export default {
  data(){
    return {
      month : 1
    }
  },
  watch : {
    month(){
      //month가 변경될 때 실행할 코드
    }
  }
}
 

 

watch 라는 항목에 감시자들을 만들 수 있습니다. 정해져있음

그리고 여기엔 함수를 집어넣을 수 있는데

함수명을 특이하게도 내가 감시하고 싶은 데이터명으로 작명하셔야합니다.

month() 이렇게 지으면 month 데이터 감시자가 되는 것임

그리고 그 함수안에 month가 변할 때마다 실행하고 싶은 코드를 적어주면 완성입니다.

참고로 month(a) 안에 파라미터 아무거나 작명해서 사용가능한데

그 파라미터는 month가 변경될 값을 의미합니다.

(두개까지 작명가능한데 첫째는 변경될 값, 둘째는 변경전 값을 의미합니다.)

 

 

 

 

Q. month 라는 데이터가 12보다 크게 변하면 경고문 띄우려면?

 

자바스크립트로 alert('안녕') 이렇게 쓰면 경고문을 띄울 수 있습니다.

----------------------------------------------------------------------------------------------------------
뷰 공식문서 살펴보다보면 Lifecycle 이라고 설명하는 이상한 부분이 있습니다. 

대충 컴포넌트는 이런 step으로 생성되고 사라지고 업데이트 된다는 소리인데

이걸 왜 설명하고 있냐면 Lifecycle hook 이란걸 쓰기 위해서입니다. 

 

 

 

 

1. 컴포넌트를 보여줄 때 create -> mount 이 단계로 생성됩니다. 

create는 데이터생성, mount는 index.html 파일에 장착 이렇게 생각하시면 됩니다. 

2. 데이터가 바뀌어서 컴포넌트가 재렌더링될 때는 update 단계를 거치며

3. 다른페이지로 이동하거나 그럴 때 컴포넌트가 삭제될 때는 unmount 라는 단계를 거칩니다. 

 

이 단계들 중간중간에 코드를 실행시키고 싶을 때가 있습니다. 

예를 들면 mount 되기 전에 뭔가 ajax 요청으로 서버에서 데이터를 가져오거나 

update 되기 전에 뭔가 코드를 실행해서 데이터를 검증해보거나 

이런 식입니다. 

그럴 때 lifecycle hook을 골라서 쓰면 됩니다. 

 

 

 

beforeCreate()
created()
beforeMount()
mounted()
beforeUpdate()
updated()
beforeUnmount()
unmounted()
대충 이렇게 있습니다. 함수명만 잘 읽어봐도 어떤 기능을 하는 함수인지 알 수 있겠군요. 

예를 들어서 beforeUpdate() 이건 언제 쓰는 함수겠습니까.

컴포넌트가 update되기 전에 뭔가 실행시키고 싶을 때 쓰는 함수입니다.

 

예를 들어서 mounted() 이건 언제쓰는 함수겠습니까.

컴포넌트가 mount 되고 나서 뭔가 실행시키고 싶을 때 쓰는 함수입니다.

 

 

data(){
  return {
  
  }
},
mounted(){
  어쩌구~
}
대충 컴포넌트 파일 하단에 저런 식으로 쓰면 됩니다. 그럼 mount가 되고나서 어쩌구~라는 코드를 실행해줍니다. 

 

 

 

특히 서버가 있으면 서버에서 데이터 가져오는 일이 잦은데

데이터가져오는 코드를 mounted() 아니면 created() 여기에 보통 작성합니다.


일단 App.vue에 할인해주는 문구를 <p>태그로 하나 만들어보겠습니다.

원래는 <Discount>가 있지만 약간 이해를 돕기 위해서 새로 만들겁니다. 

 

그 안에 30% 이런 수치가 있으면 데이터로 만들어서 {{박아넣습니다}} 

왜 데이터로 만들어서 {{데이터바인딩}} 하냐고요? 자주변하는 데이터는 그렇게 하라고 배웠던 기억이 납니다.  

그래서 역시 문법만 외우면 되는게 아니라 이 문법을 언제 왜 쓰는지를 함께 배워야합니다. 

 

(App.vue)
<p>지금 결제하면 {{amount}}% 할인</p>

(App.vue 하단 데이터만드는 곳)
data(){
 return {
    amount : 30,
  }
}

그럼 이제 페이지 로드시 저 30이라는 숫자를 1초마다 1씩 감소시켜야합니다. 

그건 setInterval() 이라는 자바스크립트 내장 함수 이용하면 된다고 했습니다. 

그리고 페이지 로드시 실행해야하니까 mounted()안에 넣으면 되겠군요. 

 

(App.vue 하단)

mounted(){
  setInterval(()=>{
      this.amount--;
  }, 1000);
}
이러면 끝입니다.

모달창 내에 input이 있는데 여기에 2를 기입했을 때 알림창 alert() 을 띄우려면?

물론 watcher를 쓰면 되는데 이거 말고 오늘 배운 lifecycle hook을 이용합시다. 

힌트는 데이터가 변경되면 HTML (컴포넌트)가 재렌더링되는데 이걸 라이프사이클 용어로 update라고 합니다. 

지금 모달창 내의 <input>에 뭔가 입력하면 HTML이 자동으로 재렌더링 됩니다.

이걸 라이프사이클 용어로 표현하면 <Modal> 컴포넌트가 update 되는겁니다.

일부분만 바뀌는 것 같지만 <Modal>이 전부 재렌더링 된다고 보시면 됩니다. 원래 그럼 

 

 

그래서 update 되기 전에 뭔가 실행하고 싶어서 

Modal.vue 안에다가 라이프사이클 훅을 걸어볼겁니다.

 

beforeUpdate(){
    if (this.month == 2){
      alert('2개월은 너무 적음.. 안팝니다')
    }
 }
▲ 업데이트 되기 전에 month라는 데이터를 검사하는겁니다.

그리고 그 데이터가 2면 뭔가 원하는 동작을 실행시켜주는 코드입니다. 

 

----------------------------------------------------------------------------------------------------------

 5 분
라우터 나머지 기능들 (hash mode, guards)
 

 

1. Hash mode vs HTML5 mode

 

우리가 맨 처음 셋팅해놨던 코드는 이렇습니다. 

 

import { createRouter, createWebHistory } from 'vue-router'

const router = [];
const router = createRouter({
  history: createWebHistory(),
  routes,
})
 

history : createWebHistory() 이런 설정을 추가해놨는데

이게 문제가 되는 경우 다르게 설정해놓을 수 있습니다. 

 

 

 

 

import { createRouter, createWebHashHistory } from 'vue-router'

const router = [];
const router = createRouter({
  history: createWebHashHistory(),
  routes,
})
 

history: createWebHashHistory()

이렇게 설정해놓는건데 이걸 Hash mode라고 합니다.

이걸 선택하시면 URL에 전부 #이 붙은 채로 시작합니다.

codingapple.com/#/detail 이런 식입니다

 

 

 

- HTML5 mode를 선택한 경우

누군가 /detail 이라고 URL란에 입력하면 실은 이건

Vue router로 /detail을 보여주세요~가 아니라

서버에 /detail 페이지를 요청해주세요~ 라는 뜻입니다. 

그래서 Vue가 라우팅을 해주기 전에 서버가 /detail 페이지를 보여주려고 할 수도 있습니다.

근데 서버에 아무 기능을 개발안해놨으니 404페이지가 뜨거나 그럴 수 있습니다.  

그래서 이걸 방지하려면 서버에다가 "어떤 사람이 /어쩌구로 접속하면 그냥 Vue에게 라우팅 맡겨주세요~" 라고 미리 기능개발이 필요합니다. 

 

 

- Hash mode를 선택한 경우

hash mode의 장점은 일단 URL에 #이 붙은 채로 시작합니다.

codingapple.com/#/ 이게 메인페이지입니다. 

왜 # 이걸 붙이냐면 URL에서 # 뒤에 있는 내용들은 절대 서버로 전달되지 않아서 그렇습니다.

 

그래서 서버가 라우팅을 채가는 일을 방지할 수 있고

Vue router에게 온전히 라우팅을 맡길 수 있는 것입니다. 

그래서 님들이 서버가 없으면 # 붙는 hash 라우터로 사이트를 만드는 것도 좋은 선택입니다. 

 

 

 

 

 

2. Navigation guards

 

특정 URL로 접속할 때 뭔가 코드를 실행하고 싶은 경우가 있습니다.

예를 들어서 마이페이지를 만들었는데 이걸 로그인한 사람만 보여주고 싶은 경우

라우팅해주기 전에 "니 로그인했냐" 이런 코드를 실행해야합니다. 

그럴때 navigation guard를 쓰면 됩니다.

이것은 네비게이션해주기 전에 실행할 수 있는 코드, 그니까 hook 같은 거라고 보면 되겠습니다. 

 

 

 

 

예를 들면 /hello 라는 경로로 들어가기 전에 뭔가 검사를 해주고 싶으면 beforeEnter 라는 항목을 만들어주면 됩니다.

그리고 거긴 함수를 적어주면 됩니다.

그 함수는 경우에 따라서 다른 route를 퉤 뱉는 함수가 되면 됩니다.

 

const routes = [
  {
    path: "/hello",
    component: HelloWorld,
    beforeEnter: ()=>{
      if (로그인했냐 == false) {
        return '/login'
      }
    }
  }
];
이런 식입니다.

/hello로 들어가기 전에 "로그인했냐라는 변수가 false면 /login 페이지로 보내기" 기능을 개발해놨습니다. 

님이 서버와 로그인기능이 있는 실제 서비스라면

로그인한 사용자는 대부분 쿠키나 로컬스토리지에 로그인 정보가 저장되어있습니다.

그게 있는지 검사하거나 하면 되겠군요. 

다만 자바스크립트 변수나 데이터들은 콘솔창 코드입력으로 언제나 위조가 가능하기 때문에

서버도 당연히 마이페이지 내용을 보내주기 전에 로그인 했는지 검증을 해봐야겠죠?

 

 

 

const routes = [
  {
    path: "/hello",
    component: HelloWorld,
    beforeEnter: (to, from)=>{
      return to.fullPath
    }
  }
];
파라미터는 두세개 작명이 가능한데

첫 파라미터는 목적지 페이지, 

둘째 파라미터는 출발 페이지입니다. 

그리고 그것들은 $route라는 변수랑 똑같이 이용가능합니다.

to.fullPath하면 전체 경로를 알려주고

to.params.id 하면 id 파라미터를 알려주고 그렇습니다. 

 

 

참고로 return false는 라우팅 중단,

return이 없으면 그냥 원래의 route인 /hello로 잘 이동시켜줍니다. 

 

 

 

 

 

3. 여러개의 route에 같은 navigation guard를 추가하고 싶으면

 

router라는 변수에다가 .beforeEach() 이런거 쓰시면 됩니다.

내부엔 함수가 들어가는데 사용법은 아까랑 똑같습니다.

 

const router = createRouter({ 어쩌구 })
router.beforeEach((to, from) => {
  //페이지 변경 전에 실행할 코드
})
 

 

라우팅 전에 뭔가 실행하고 싶으면 beforeEach() 혹은 beforeResolve()를 쓰면 되고

라우팅 하고나서 뭔가 실행하고 싶으면 afterEach() 쓰면 됩니다. 

 

 

 

 

4. Vue 컴포넌트 안에서도 navigation guard 쓸 수 있음

 

vue 파일 안에서도 페이지 이동시 뭔가 코드를 실행가능합니다.

created() mounted() 이런거랑 비슷하게 활용가능합니다.

 

beforeRouteEnter(){}
beforeRouteUpdate(){} 
라는 것들을 lifecycle hook쓰는 위치에다가 쓰면 됩니다. 

파라미터는 두개 입력가능한데 각각 목적지인 to, 출발지인 from을 의미합니다.

특정 페이지로 접속했을 때 ajax 요청하고 그럴 일이 있으면 저기다가 쓰시면 됩니다. 

 

 

더 자세한내용은 vue router 4버전 페이지를 참고합시다. 

https://next.router.vuejs.org/